I want to check if user is logged in before updating the user details each time.
I am personally thinking about making routes and use them as 
middlewares for the app.put('/users/password') and app.put('/users/name')

server.js
```
const express = require("express")
const app = express()
const bcrypt = require("bcrypt")
const fs = require('fs')

app.use(express.json())
// to get json from req.body

let users;

async function addUser(user) {
    const salt = await bcrypt.genSalt()
    const hashedPassword = await bcrypt.hash(user.password, salt)
    const newUser = { name: user.name, password: hashedPassword };
    users.push(newUser);
    fs.appendFile('USERS.json', ',' + JSON.stringify(newUser), (err) => {
        if (err) throw err;
        console.log('User appended to file!');
    });
    return newUser;
}

// here we send the latest updated user to be set after checking.
function editUserEmail(user) {
    const foundUser = users.find(u => u.name === user.name);
    if (foundUser === null)
        res.status(401).send('User does not exist')
    else if (foundUser) {
        foundUser.email = user.email;
        fs.writeFile('USERS.json', JSON.stringify(users), (err) => {
            if (err) throw err;
            console.log('User email updated in file!');
        });
        res.status(200).send("Changes successful")
    }
}
// here we send the latest updated user to be set after checking.
function editUserPassword(user) {
    const foundUser = users.find(u => u.name === user.name);
    if (foundUser === null)
        res.status(401).send('User does not exist')
    else if (foundUser) {
        foundUser.email = user.email;
        fs.writeFile('USERS.json', JSON.stringify(users), (err) => {
            if (err) throw err;
            console.log('User email updated in file!');
        });
        res.status(200).send("Changes successful")
    }
}
// here we send the latest updated user to be set after checking.
function editUserName(user) {
    const foundUser = users.find(u => u.name === user.name);
    if (foundUser === null)
        res.status(401).send('User does not exist')
    else if (foundUser) {
        foundUser.name = user.name;
        fs.writeFile('USERS.json', JSON.stringify(users), (err) => {
            if (err) throw err;
            console.log('User name updated in file!');
        });
        res.status(200).send("Changed Name successfuly!")
    }
}

function removeUser(user) {
    const foundUser = users.find(u => (u.name === user.name) && (u.password=== user.password) );
    if (foundUser === null)
        res.status(401).send('User does not exist')

    users = users.filter(u => u.name !== user.name);
    fs.writeFile('USERS.json', JSON.stringify(users), (err) => {
        if (err) throw err;
        console.log('User removed from file!');
    });
}

fs.readFile('USERS.json', 'utf8', (err, data) => {
    if (err) {
        console.error(err);
        return;
    }

    users = JSON.parse(data);

    console.log(users);
});

// This is just for the basic project.
//In real use case we will get from the server db sql/no sql

app.listen(8002, () => {
    console.log("Server started\n Listening on http://localhost:8002")
})

// also we will add middleware route to check if user making the request
// has the permission to post or get on this route.

// to add new users
app.post('/signup', async (req, res) => {
    try {
        let user= addUser(req.body);
        res.status(201).send(user);
        console.log("Newly added user: ", users[users.length - 1])
    }
    catch (err) {
        console.log(err.message);
        res.status(500).send()
    }
})

// to change user email
app.put('/users/password', (req, res)=>{
    editUserEmail(req.body)
})

// to change user name
app.put('/users/name', (req, res)=>{
    editUserName(req.body)
})

app.delete('/users/remove', (req, res)=>{
    removeUser(req.body);
})

// to check user login
app.get('/users/login', async (req, res) => {
    const user = users.find(user => req.body.name === user.name)
    if (user === null) {
        return res.status(401).send('Cannot find the user.')
    }
    try {
        if (bcrypt.compare(req.body.password, user.password)) {
            res.status(200).send('success')
        }
        else {
            res.status(401).send('Not allowed')
        }
    }
    catch {
        res.status(500).send("Invalid user")
    }
})

app.get("/", (req, res) => {
    res.send("Yeah connected");
})

app.get('/users', (req, res) => {
    res.json(users);
})

app.get("/:page", (req, res) => {
    res.send(`We are working on ${req.params.page}`)
})
```

Tell me the uproach I should try. Then code upon approval.
